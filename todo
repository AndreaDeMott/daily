* Project assessments, including ways to improve (gain more points)
* Notes for those who come after us
* Blocks / block challenges
* Modules? / Module Challenges?
* Unlock: make your own Enumerable (called iterable ;)
* Play with http stuffs if you're going tonight ([waypoint](https://github.com/turingschool/waypoints/blob/master/waypoints/http.md))

* Project time
* Implement a comparable object
* Add / commit dotfiles and put them on our github
* Synthesis (all the shit we've covered so far)
* Some Refactoring?
* Yoga


* Re-implement `each` in your linked list.
* Implement `each_node` in the linked list challenges
* Refactor as many linked list challenges to use these as you can






* Challenges
  * Regex quiz
    * find all words
    * find all words that begin with capital letters
    * find the first word of each line
    * find the last word of each line
    * find all strings of numbers
    * phone number
    * email
    * every two characters
    * file extensions
    * file basenames
    * class definitions in a file
    * installed gems and their most recent version (gem list)
    * links in the dailies
    * keys and values from an http request
    * symbols in a ruby program
    * the method in a linked list
    * the status code in a linked list
  * Linked list challenges
    * Find the first item in a linked list (of size 0, 1, 2, 3)
    * Find the last item in a linked list (of size 0, 1, 2, 3)
    * Find the largest item in a linked list (of size 0, 1, 2, 3)
    * Find the smallest item in a linked list (of size 0, 1, 2, 3)
    * Find the length of a linked list
    * Remove an item from a linked list
    * Add an item to a linked list
    * Given a linked list of numbers, return a linked list of just the even numbers
    * Given a linked list of numbers, return a linked list of just the odd numbers
    * Given a linked list of numbers, return a linked list of just the numbers that pass a block I give you
    * Given a linked list of strings, return a linked list of the strings with more than 5 chars
    * Given a linked list of strings, return a linked list of the strings with more than 10 chars
    * Given a linked list of ints, return a linked list of the integers that are divisible by 3
    * Given a linked list of strings, return the count of how many end in an "s"
    * Given a linked list of strings, return a linked list of the ones that look like phone numbers (three digits, a dash, four digits)
    * In a linked list of medusas, find the medusa with the most statues
    * In a linked list of medusas, find all the medusas with more than 3 statues
    * In a linked list of medusas, Find all the statues in a linked list of medusas
    * In a linked list of medusas, find the medusa with the statue who has the the largest name
    * In a linked list of medusas, find all the statues whose last name is Smith
    * In a linked list of medusas, find all the statues in a linked list of medusas, but don't include statues that have the same name
    * In a linked list of medusas, find all the statues whose last name begins with an S
    * Find the first item from each list of a linked list of linked lists
    * Find the last item from each list of a linked list of linked lists
    * Given a linked list of strings, return a linked list of ints (ie map to_i)
    * Given a linked list of ints, return a linked list of strings (ie map to_s)
    * Flatten a linked list of linked lists
    * In a linked list of friend pairs, find the person with the most friends
    * Map a linked list of lists to the length of each list (ie map(&:count))
    * Given a linked list of linked lists of strings, return the list that has the largest number of strings that contain a smiley face
    * In a linked list of booleans, return the number they would represent if they represented binary 1s/0s
    * In a linked list of filenames, return the name of the file that has the most lines
    * Given a linked list of numbers, remove and return the element that has the fewest items
    * Do the above until the list is empty
    * Do the above, but return the result in a linked list (You just wrote a selection sort ;)
    * Given a linked list of medusas whose statues are trick or treaters with bags of candy, return how much candy each medusa has
    * Given a linked list of gems, return the one that is at the highest version
    * Obj model
      * Given a binding, return its self
  * Future?
    * Find all test classes in a Ruby program

* Build array
* Chisel
* File system?
* Can you think of a callstack waypoint? (self, method lookup, local variables?)
* OO http://c2.com/cgi/wiki?AlanKayOnMessaging
* Next vim keybindings
  ```ruby
  [ 'Fix my terrible indentation, pls, vim',
    'vertical editing',
    'Scroll up / down',
    'substitute',
    'realign',
  ].sample
  ```
* Material
  * Choose OO problems
  * Object Model games
  * Something fun:
    * $ curl 'http://api1.chicagopolice.org/clearpath/api/1.0/crimes/major' | jq .
* Organization
  * Add links to each day back to that week in the curriculum
  * Move all descriptions out of plans and into their own files
  * Link all lessons to their plans
  * Make sure all links work in the markdown file
  * Label / Upload videos
  * Add a place to track student info

* Todd Connor reflections - what would be interesting to learn?
  * Javi
    * More dedication to learning this craft
    * Financial industry, a startup working with underrepresented communities
    * Mobile (Swift / Java)
    * Trading algorithms
    * Automation
  * Vince
    * Careers / Internships at Oculus
    * C / C++ / Java
    * VR
    * 3D rendering
    * Algorithms
  * Greg
    * Eliminate tedium (eg Kcura)
    * Machine learning
    * Automating processes
  * Sean
    * Feel confident / competent
    * Chi city
    * Health care and reducing costs for people
    * eg Online eye exams
  * Matthew
    * Building a network
    * Financial markets
    * Trading / algorithms
    * Math languages
    * Security (pentesting or something)
  * Megan
    * Prospects
    * Eff finance
    * Anthropological genetic analysis
    * Data / Algorithms
  * James
    * Food
    * http://www.getpared.com
    * Something that does Food delivery
  * Derreck
    * Project Portfolio
    * Small company in Chi or nearby
    * Game


Later

* Additional unix programs:
  * env
  * curl
  * which
  * ?? minutes
* Game called "predict the error"?
* Game called "fix the error"?
* File system waypoints
* Make sure all lessons are in the curriculum
* Stacks
  * Stacks with hashes
  * Stacks with objects
* Queues
  * Queues with hashes
  * Queues with objects
* Assignment possibilities
  * Choose OO problems
    * explain (ctrl-F and mrspec), skip tests that aren't filled in
    * Mythical creatures [challenges](https://github.com/turingschool/ruby-exercises)
  * Go over tonight's homework
    * Choose someone's aggregated list and do quizzes on each topic
  * Write a sorting algorithm (we'll figure out how to visualize it!)
    * later we can talk about how AI works
  * Binary search trees!
  * Draw in JS
    * Later: L-systems
  * Parse some data from an API (uhm, one of my moleskines has a lot of reasonable ideas)
  * Play with music? (Sonic Pi)
  * Build a programming language?
    * Or... a Ruby interpreter?
  * Make a game? (Gosu)
  * Blocks... wtf are those and how do they work?
  * Stacks and queues
  * Write cln?








1. Watch [Programming like God](https://vimeo.com/131588133).
1. Write a reflection describing the process
   the decisions that are being made, why they are being made, etc.
   Spend at least an hour on this, you want to think deeply about it.
1. Try doing [Chisel](http://tutorials.jumpstartlab.com/projects/chisel.html),
   making decisions the same way you saw me do it. Your goal isn't
   to solve Chisel, it's not to have the same solution I have.
   The goal is to put yourself in the same situations you saw me in,
   and think in the same ways while in those situations.
   How come? Remember tip #10 in the Little Book of Talent:

   > Precision especially matters early on, because the first
   > reps establish the pathways for the future. Neurologists
   > call this the "sled on a snowy hill" phenomenon. The
   > first repetitions are like the first sled tracks on fresh
   > snow: On subsequent tries, your sled will tend to follow
   > those grooves. "Our brains are good at building
   > connections," says Dr. George Bartzokis, a neurologist at
   > UCLA. "Theyâ€™re not so good at unbuilding them."

   We're trying to make your first reps with project development
   to be ones that set you in the right direction. The time,
   frustration, and panic this will save going forward could
   legitimately make the difference!

   Success here is in how you teach yourself to approach a project!
1. Now that you've tried it yourself, watch the video again.
   yes, seriously, it's about the way of thinking.

* Sorting Suite!
