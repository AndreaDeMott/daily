* build a gem
* build array
* chisel



* File system?
* Can you think of a callstack waypoint? (self, method lookup, local variables?)
* OO http://c2.com/cgi/wiki?AlanKayOnMessaging

* Next vim keybindings
  ```ruby
  [ 'Combining deletion (G, gg, tx, etc)',
    'Combining copying  (G, gg, tx, etc)',
    'Fix my terrible indentation, pls, vim',
    'change inner/surrounding whatevz',
    'vertical editing',
    'Autocomplete',
    'Scroll up / down',
    'substitute',
  ].sample
  ```
* Material
  * Choose OO problems
  * Object Model games
  * Something fun:
    * $ curl 'http://api1.chicagopolice.org/clearpath/api/1.0/crimes/major' | jq .
* Organization
  * Add links to each day back to that week in the curriculum
  * Move all descriptions out of plans and into their own files
  * Link all lessons to their plans
  * Make sure all links work in the markdown file
  * Label / Upload videos
  * Add a place to track student info

* Todd Connor reflections - what would be interesting to learn?
  * Javi
    * More dedication to learning this craft
    * Financial industry, a startup working with underrepresented communities
    * Mobile (Swift / Java)
    * Trading algorithms
    * Automation
  * Vince
    * Careers / Internships at Oculus
    * C / C++ / Java
    * VR
    * 3D rendering
    * Algorithms
  * Greg
    * Eliminate tedium (eg Kcura)
    * Machine learning
    * Automating processes
  * Sean
    * Feel confident / competent
    * Chi city
    * Health care and reducing costs for people
    * eg Online eye exams
  * Matthew
    * Building a network
    * Financial markets
    * Trading / algorithms
    * Math languages
    * Security (pentesting or something)
  * Megan
    * Prospects
    * Eff finance
    * Anthropological genetic analysis
    * Data / Algorithms
  * James
    * Food
    * http://www.getpared.com
    * Something that does Food delivery
  * Derreck
    * Project Portfolio
    * Small company in Chi or nearby
    * Game


Later

* Additional unix programs:
  * env
  * curl
  * which
  * ?? minutes
* Game called "predict the error"?
* Game called "fix the error"?
* File system waypoints
* Make sure all lessons are in the curriculum
* Stacks
  * Stacks with hashes
  * Stacks with objects
* Queues
  * Queues with hashes
  * Queues with objects
* Assignment possibilities
  * Choose OO problems
    * explain (ctrl-F and mrspec), skip tests that aren't filled in
    * Mythical creatures [challenges](https://github.com/turingschool/ruby-exercises)
  * Go over tonight's homework
    * Choose someone's aggregated list and do quizzes on each topic
  * Write a sorting algorithm (we'll figure out how to visualize it!)
    * later we can talk about how AI works
  * Binary search trees!
  * Draw in JS
    * Later: L-systems
  * Parse some data from an API (uhm, one of my moleskines has a lot of reasonable ideas)
  * Play with music? (Sonic Pi)
  * Build a programming language?
    * Or... a Ruby interpreter?
  * Make a game? (Gosu)
  * Blocks... wtf are those and how do they work?
  * Stacks and queues
  * Write cln?








1. Watch [Programming like God](https://vimeo.com/131588133).
1. Write a reflection describing the process
   the decisions that are being made, why they are being made, etc.
   Spend at least an hour on this, you want to think deeply about it.
1. Try doing [Chisel](http://tutorials.jumpstartlab.com/projects/chisel.html),
   making decisions the same way you saw me do it. Your goal isn't
   to solve Chisel, it's not to have the same solution I have.
   The goal is to put yourself in the same situations you saw me in,
   and think in the same ways while in those situations.
   How come? Remember tip #10 in the Little Book of Talent:

   > Precision especially matters early on, because the first
   > reps establish the pathways for the future. Neurologists
   > call this the "sled on a snowy hill" phenomenon. The
   > first repetitions are like the first sled tracks on fresh
   > snow: On subsequent tries, your sled will tend to follow
   > those grooves. "Our brains are good at building
   > connections," says Dr. George Bartzokis, a neurologist at
   > UCLA. "Theyâ€™re not so good at unbuilding them."

   We're trying to make your first reps with project development
   to be ones that set you in the right direction. The time,
   frustration, and panic this will save going forward could
   legitimately make the difference!

   Success here is in how you teach yourself to approach a project!
1. Now that you've tried it yourself, watch the video again.
   yes, seriously, it's about the way of thinking.

* Sorting Suite!
